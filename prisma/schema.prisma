// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId],references: [id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])


}
model Category {
   id String @id @default(uuid())
   name String @unique
   courses Course[]
}
model Attachment{
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseID String
  course Course @relation(fields: [courseID], references: [id], onDelete:Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([courseID])

}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?



  courseID String
  course Course @relation(fields: [courseID], references: [id], onDelete:Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseID])
  
  
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterID String @unique
  chapter Chapter @relation(fields: [chapterID], references: [id], onDelete:Cascade)
}

model UserProgress {
  id String @id @default(uuid())
  userId String
  chapterID String
  chapter Chapter @relation(fields: [chapterID], references: [id], onDelete:Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterID])
  @@unique([userId, chapterID])
  
}

model Purchase {
  id String @id @default(uuid())
  userId String
  courseID String
  paymentId String?
  course Course @relation(fields: [courseID], references: [id], onDelete:Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseID])
  @@unique([userId, courseID])
}

model RazorpayCustomer {
  id String @id @default(uuid())
  userId String @unique
  razorpayCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
